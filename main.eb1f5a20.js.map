{"version":3,"sources":["scripts/main.js"],"names":["START_BTN","document","querySelector","RESTART_VALUE","START_MESSAGE","WIN_MESSAGE","LOSE_MESSAGE","SCORE","ROW","querySelectorAll","ARROW","UP","RIGHT","DOWN","LEFT","WIN_VALUE","ROWS","COLUMNS","board","score","isLose","isWon","isInit","loseGame","row","column","nextColumn","undefined","nextRow","sameBoards","arr1","arr2","length","i","j","nextStep","newBoard","setNewCell","updateBoard","deleteZeros","item","filter","cell","transposeMatrix","arr","columnCount","rowsCount","tempArr","col","push","wonGame","classList","remove","trigger","number","Math","random","floor","children","cellValue","textContent","className","add","initGame","moveUp","matrix","tempBoard","forEach","moveRight","unshift","moveDown","moveLeft","addEventListener","e","preventDefault","key","contains"],"mappings":"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","file":"main.eb1f5a20.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst START_BTN = document.querySelector('.button');\nconst RESTART_VALUE = 'Restart';\nconst START_MESSAGE = document.querySelector('.message-start');\nconst WIN_MESSAGE = document.querySelector('.message-win');\nconst LOSE_MESSAGE = document.querySelector('.message-lose');\nconst SCORE = document.querySelector('.game-score');\n\nconst ROW = document.querySelectorAll('.field-row');\n\nconst ARROW = {\n  UP: 'ArrowUp',\n  RIGHT: 'ArrowRight',\n  DOWN: 'ArrowDown',\n  LEFT: 'ArrowLeft',\n};\n\nconst WIN_VALUE = 2048;\nconst ROWS = 4;\nconst COLUMNS = 4;\n\nlet board = [];\nlet score = 0;\nlet isLose = false;\nlet isWon = false;\nlet isInit = false;\n\nfunction loseGame() {\n  for (let row = 0; row < ROWS; row++) {\n    for (let column = 0; column < COLUMNS; column++) {\n      if (board[row][column] === 0) {\n        return false;\n      }\n\n      const nextColumn = board[row][column + 1];\n\n      if (nextColumn !== undefined && board[row][column] === nextColumn) {\n        return false;\n      }\n    }\n  }\n\n  for (let column = 0; column < COLUMNS; column++) {\n    for (let row = 0; row < ROWS - 1; row++) {\n      const nextRow = board[row + 1][column];\n\n      if (nextRow !== undefined && board[row][column] === nextRow) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction sameBoards(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < arr1.length; i++) {\n    for (let j = 0; j < arr1[i].length; j++) {\n      if (arr1[i][j] !== arr2[i][j]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction nextStep(newBoard) {\n  board = newBoard;\n  setNewCell();\n  updateBoard();\n}\n\nfunction deleteZeros(item) {\n  return item.filter(cell => cell !== 0);\n}\n\nfunction transposeMatrix(arr, columnCount, rowsCount) {\n  const tempArr = [];\n\n  for (let column = 0; column < columnCount; column++) {\n    const col = [];\n\n    for (let row = 0; row < rowsCount; row++) {\n      col.push(arr[row][column]);\n    }\n    tempArr.push(col);\n  }\n\n  return tempArr;\n}\n\nfunction wonGame() {\n  isWon = true;\n  isInit = false;\n  WIN_MESSAGE.classList.remove('hidden');\n}\n\nfunction setNewCell() {\n  let trigger = true;\n  const number = Math.random() < 0.9 ? 2 : 4;\n\n  while (trigger) {\n    const row = Math.floor(Math.random() * ROWS);\n    const column = Math.floor(Math.random() * COLUMNS);\n\n    if (board[row][column] === 0) {\n      board[row][column] = number;\n      trigger = false;\n    }\n  }\n\n  if (loseGame()) {\n    isLose = true;\n    isInit = false;\n    LOSE_MESSAGE.classList.remove('hidden');\n  }\n}\n\nfunction updateBoard() {\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      const cell = ROW[i].children[j];\n      const cellValue = board[i][j];\n\n      if (cellValue) {\n        cell.textContent = cellValue;\n        cell.className = 'field-cell';\n        cell.classList.add(`field-cell--${cellValue}`);\n\n        if (cellValue === WIN_VALUE) {\n          wonGame();\n        }\n      } else {\n        cell.textContent = '';\n        cell.className = 'field-cell';\n      }\n      SCORE.textContent = score;\n    }\n  }\n}\n\nfunction initGame() {\n  START_MESSAGE.classList.add('hidden');\n  LOSE_MESSAGE.classList.add('hidden');\n  WIN_MESSAGE.classList.add('hidden');\n  SCORE.textContent = 0;\n\n  isInit = true;\n  isLose = false;\n  isWon = false;\n  score = 0;\n\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  for (let i = 0; i < board.length; i++) {\n    for (let j = 0; j < board[i].length; j++) {\n      const cell = ROW[i].children[j];\n\n      cell.textContent = '';\n      cell.className = 'field-cell';\n    }\n  }\n\n  setNewCell();\n  setNewCell();\n  updateBoard();\n}\n\nfunction moveUp() {\n  const matrix = transposeMatrix(board, COLUMNS, ROWS);\n  const tempBoard = [];\n\n  matrix.forEach(col => {\n    let column = deleteZeros(col);\n\n    for (let i = 0; i < column.length; i++) {\n      if (column[i] === column[i + 1]) {\n        column[i] *= 2;\n        score += column[i];\n        column[i + 1] = 0;\n      }\n    }\n    column = deleteZeros(column);\n\n    while (column.length < ROWS) {\n      column.push(0);\n    }\n\n    tempBoard.push(column);\n  });\n\n  if (!sameBoards(board, transposeMatrix(tempBoard, COLUMNS, ROWS))) {\n    nextStep(transposeMatrix(tempBoard, COLUMNS, ROWS));\n  }\n}\n\nfunction moveRight() {\n  const tempBoard = [];\n\n  board.forEach(item => {\n    let row = deleteZeros(item);\n\n    for (let i = row.length - 1; i >= 0; i--) {\n      if (row[i] === row[i - 1]) {\n        row[i] *= 2;\n        score += row[i];\n        row[i - 1] = 0;\n      }\n    }\n    row = deleteZeros(row);\n\n    while (row.length < ROWS) {\n      row.unshift(0);\n    }\n\n    tempBoard.push(row);\n  });\n\n  if (!sameBoards(board, tempBoard)) {\n    nextStep(tempBoard);\n  }\n}\n\nfunction moveDown() {\n  const matrix = transposeMatrix(board, COLUMNS, ROWS);\n  const tempBoard = [];\n\n  matrix.forEach(item => {\n    let column = deleteZeros(item);\n\n    for (let i = column.length - 1; i >= 0; i--) {\n      if (column[i] === column[i - 1]) {\n        column[i] *= 2;\n        score += column[i];\n        column[i - 1] = 0;\n      }\n    }\n    column = deleteZeros(column);\n\n    while (column.length < ROWS) {\n      column.unshift(0);\n    }\n\n    tempBoard.push(column);\n  });\n\n  if (!sameBoards(board, transposeMatrix(tempBoard, COLUMNS, ROWS))) {\n    nextStep(transposeMatrix(tempBoard, COLUMNS, ROWS));\n  }\n}\n\nfunction moveLeft() {\n  const tempBoard = [];\n\n  board.forEach(item => {\n    let row = deleteZeros(item);\n\n    for (let i = 0; i < row.length; i++) {\n      if (row[i] === row[i + 1]) {\n        row[i] *= 2;\n        score += row[i];\n        row[i + 1] = 0;\n      }\n    }\n    row = deleteZeros(row);\n\n    while (row.length < ROWS) {\n      row.push(0);\n    }\n\n    tempBoard.push(row);\n  });\n\n  if (!sameBoards(board, tempBoard)) {\n    nextStep(tempBoard);\n  }\n}\n\ndocument.addEventListener('keydown', (e) => {\n  e.preventDefault();\n\n  if (!isInit || isLose || isWon) {\n    return;\n  }\n\n  switch (e.key) {\n    case ARROW.UP:\n      moveUp();\n      break;\n\n    case ARROW.DOWN:\n      moveDown();\n      break;\n\n    case ARROW.RIGHT:\n      moveRight();\n      break;\n\n    case ARROW.LEFT:\n      moveLeft();\n      break;\n\n    default:\n      return;\n  };\n});\n\nSTART_BTN.addEventListener('click', () => {\n  if (START_BTN.classList.contains('start')) {\n    START_BTN.textContent = RESTART_VALUE;\n    START_BTN.classList.add('restart');\n    START_BTN.classList.remove('start');\n    START_MESSAGE.classList.add('hidden');\n  }\n\n  initGame();\n});\n"]}